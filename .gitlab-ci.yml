image: php:7.2-cli

stages:
  - build
  - deploy

variables:
  ZIP_TEMP_FOLDER_NAME: develop_DEPLOY_TMP
  ZIP_TEMP_FOLDER_NAME_STAGING: staging_DEPLOY_TMP
  ZIP_TEMP_FOLDER_NAME_PROD: prod_DEPLOY_TMP
  SERVER: user@server.com
  PORT: 5050
  SERVER_ROOT_WHERE_DEPLOY_FOLDER_DEV: /home/user/www/subdomains
  SERVER_FOLDER_NAME_DEV: develop
  SERVER_ROOT_WHERE_DEPLOY_FOLDER_STAGING: /home/user/www/subdomains
  SERVER_FOLDER_NAME_STAGING: staging
  SERVER_ROOT_WHERE_DEPLOY_FOLDER_PROD: /home/user/www
  SERVER_FOLDER_NAME_PROD: prod_server_folder
  WP_THEME_PATH: web/app/themes/wp_theme_folder_name

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .yarn
    - web/app/themes/wp_theme_folder_name/node_modules
    - vendor/

#####################################
# BEFORE_SCRIPTS (anchors only) #####
#####################################

.init_ssh: &ssh_set_up_commands_only 
  before_script:
  # SSH
  - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
  - eval $(ssh-agent -s)

  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d) # we use base64 decode so weird/chars or empty chars dont cause issues
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  # Allow deploy script to execute
  - chmod +x ./deploy.sh

.init_build: &before_script_init_build 
  before_script:
  # Updates
  - curl -sL https://deb.nodesource.com/setup_10.x | bash
  - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
  - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
  - apt-get update
  - apt-get -y install yarn libpcre3-dev zlib1g-dev libbz2-dev libpng-dev libjpeg-dev nodejs git zip unzip curl rsync mariadb-client
  - docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr
  - docker-php-ext-install zip bz2 gd mysqli pdo pdo_mysql

  # Composer
  - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  - php -r "copy('https://composer.github.io/installer.sig', 'composer-setup.sig');"
  - php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
  - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
  - php -r "unlink('composer-setup.php');"
  - php -r "unlink('composer-setup.sig');"

  # Install Node / Yarn
  #- npm -g install yarn (already available with the docker image)
  - npm rebuild node-sass --force

  # SSH
  - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
  - eval $(ssh-agent -s)

  - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d) # we use base64 decode so weird/chars or empty chars dont cause issues
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  # Allow deploy script to execute
  - chmod +x ./deploy.sh

######################
# DEVELOP ############
######################

build_dev:
  stage: build
  only:
    - /^feature\/.*$/
  environment:
    name: develop
    url: https://develop.yourpage.com
  artifacts:
    paths:
      - develop_DEPLOY_TMP.zip
    expire_in: 2 hrs
  <<: *before_script_init_build
  script:
    - composer install --no-ansi --no-dev --no-interaction --optimize-autoloader --no-progress
    - cd ${WP_THEME_PATH}
    - composer install --no-ansi --no-dev --no-interaction --optimize-autoloader --no-progress
    - yarn --cache-folder ${CI_PROJECT_DIR}/.yarn
    - yarn build
    - cd $CI_PROJECT_DIR
    - echo "ZIP our deploy folder - skipping non-production files/folders!"
    # skip .cache-loader also or do we need it? make sure to skip hidden files, especially .git etc (huge!)
    # the main problem are huge .git folders in our premium composer packages (WP plugins) that come via cloning. They SHOULD NOT be zipped
    - zip -q -r ${ZIP_TEMP_FOLDER_NAME}.zip . -x '*.git*' -x '*node_modules*' -x '.*' -x '.*/.*' -x '*.DS_Store' -x '*.sql' -x '*wp-content/themes/twenty*' -x '*app/uploads/*' -x '*resources/assets/*' -x '*.lock'

deploy_dev:
  stage: deploy
  cache: {}
  only:
    - /^feature\/.*$/
  environment:
    name: develop
    url: https://develop.yourpage.com
  dependencies:
    - build_dev
  before_script: 
  <<: *ssh_set_up_commands_only
  script:
    - cd $CI_PROJECT_DIR
    - echo "##### => TRANSFER ${ZIP_TEMP_FOLDER_NAME}.zip to ${SERVER}:${SERVER_ROOT_WHERE_DEPLOY_FOLDER_DEV}"
    - scp -P ${PORT} ${ZIP_TEMP_FOLDER_NAME}.zip ${SERVER}:${SERVER_ROOT_WHERE_DEPLOY_FOLDER_DEV}
    - set +e
    - echo "##### => RUN DEPLOY SCRIPT"
    - ./deploy.sh -z ${ZIP_TEMP_FOLDER_NAME} -s ${SERVER} -p ${PORT} -r "${SERVER_ROOT_WHERE_DEPLOY_FOLDER_DEV}" -n ${SERVER_FOLDER_NAME_DEV} -t ${WP_THEME_PATH}

######################
# STAGING ############
######################

build_staging:
  stage: build
  only:
    - develop
  environment:
    name: staging
    url: https://staging.yourpage.com
  artifacts:
    paths:
      - staging_DEPLOY_TMP.zip
    expire_in: 2 hrs
  <<: *before_script_init_build
  script:
    - composer install --no-ansi --no-dev --no-interaction --optimize-autoloader
    - cd ${WP_THEME_PATH}
    - composer install --no-ansi --no-dev --no-interaction --optimize-autoloader
    - yarn --cache-folder ${CI_PROJECT_DIR}/.yarn
    - yarn build:production
    - cd $CI_PROJECT_DIR
    - echo "ZIP our deploy folder - skipping non-production files/folders!"
    # skip .cache-loader also or do we need it? make sure to skip hidden files, especially .git etc (huge!)
    - zip -q -r ${ZIP_TEMP_FOLDER_NAME_STAGING}.zip . -x '*.git*' -x '*node_modules*' -x '.*' -x '.*/.*' -x '*.DS_Store' -x '*.sql' -x '*wp-content/themes/twenty*' -x '*app/uploads/*' -x '*resources/assets/*' -x '*.lock'

deploy_staging:
  stage: deploy
  cache: {}
  only:
    - develop
  environment:
    name: staging
    url: https://staging.yourpage.com
  dependencies:
    - build_staging
  before_script: 
  <<: *ssh_set_up_commands_only
  script:
    - cd $CI_PROJECT_DIR
    - echo "##### => TRANSFER ${ZIP_TEMP_FOLDER_NAME_STAGING}.zip to ${SERVER}:${SERVER_ROOT_WHERE_DEPLOY_FOLDER_STAGING}"
    - scp -P ${PORT} ${ZIP_TEMP_FOLDER_NAME_STAGING}.zip ${SERVER}:${SERVER_ROOT_WHERE_DEPLOY_FOLDER_STAGING}
    - set +e
    - echo "##### => RUN DEPLOY SCRIPT"
    - ./deploy.sh -z ${ZIP_TEMP_FOLDER_NAME_STAGING} -s ${SERVER} -p ${PORT} -r "${SERVER_ROOT_WHERE_DEPLOY_FOLDER_STAGING}" -n ${SERVER_FOLDER_NAME_STAGING} -t ${WP_THEME_PATH}

######################
# PRODUCTION #########
######################

build_production:
  stage: build
  only:
    - master
  when: manual
  environment:
    name: production
    url: https://www.yourpage.com
  artifacts:
    paths:
      - prod_DEPLOY_TMP.zip
    expire_in: 2 hrs
  <<: *before_script_init_build
  script:
    - composer install --no-ansi --no-dev --no-interaction --optimize-autoloader --no-progress
    - cd ${WP_THEME_PATH}
    - composer install --no-ansi --no-dev --no-interaction --optimize-autoloader --no-progress
    - yarn --cache-folder ${CI_PROJECT_DIR}/.yarn
    - yarn lint
    - yarn build:production
    - cd $CI_PROJECT_DIR
    - echo "ZIP our deploy folder - skipping non-production files/folders!"
    # skip .cache-loader also or do we need it? make sure to skip hidden files, especially .git etc (huge!)
    - zip -q -r ${ZIP_TEMP_FOLDER_NAME_PROD}.zip . -x '*.git*' -x '*node_modules*' -x '.*' -x '.*/.*' -x '*.DS_Store' -x '*.sql' -x '*wp-content/themes/twenty*' -x '*app/uploads/*' -x '*resources/assets/*' -x '*.lock'

deploy_production:
  stage: deploy
  cache: {}
  only:
    - master
  when: manual
  environment:
    name: production
    url: https://www.prod.com
  dependencies:
    - build_production
  before_script: 
  <<: *ssh_set_up_commands_only
  script:
    - cd $CI_PROJECT_DIR
    - echo "##### => TRANSFER ${ZIP_TEMP_FOLDER_NAME_PROD}.zip to ${SERVER}:${SERVER_ROOT_WHERE_DEPLOY_FOLDER_PROD}"
    - scp -P ${PORT} ${ZIP_TEMP_FOLDER_NAME_PROD}.zip ${SERVER}:${SERVER_ROOT_WHERE_DEPLOY_FOLDER_PROD}
    - set +e
    - echo "##### => RUN DEPLOY SCRIPT"
    - ./deploy.sh -z ${ZIP_TEMP_FOLDER_NAME_PROD} -s ${SERVER} -p ${PORT} -r "${SERVER_ROOT_WHERE_DEPLOY_FOLDER_PROD}" -n ${SERVER_FOLDER_NAME_PROD} -t ${WP_THEME_PATH}
